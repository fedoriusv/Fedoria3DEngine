<technique name="billboard" version="100">

    <!-- Render Passes -->
    <pass name="pass0">
        <uniforms>
            <var name="transform.projectionMatrix" type="mat4" val="transform.projectionMatrix"/>
            <var name="transform.modelMatrix" type="mat4" val="transform.modelMatrix"/>
            <var name="transform.viewMatrix" type="mat4" val="transform.viewMatrix"/>
        </uniforms>
        <attributes>
            <var name="position" type="vec3" val="mesh.position"/>
        </attributes>
        <samplers>
            <var name="sampler0"/>
        </samplers>
        <renderstate>
            <polygonmode val="fill"/>
            <winding val="cw"/>
            <culling val="false"/>
            <blending val="true" src="invDstColor" dst="invSrcColor"/>
            <depthWrite val="true"/>
            <depthTest val="lequal"/>
        </renderstate>
        <rendertarget>
            <var val="default"/>
        </rendertarget>
        <lod geometry="0.0"/>
        <shaders>
            <var type="vertex" name="vbillboard">
                <![CDATA[
                    #version 330
                    #define POSITION 0
                    
                    layout (location = POSITION) in vec3 position;
                    
                    void main()
                    {
                        gl_Position = vec4(position, 1.0);
                    }
                ]]>
            </var>
            <var type="geometry" name="gbillboard">
                <![CDATA[
                    #version 330
                    
                    layout(points) in;
                    layout(triangle_strip, max_vertices = 4) out;
                    
                    struct Transform
                    {
                        mat4 projectionMatrix;
                        mat4 modelMatrix;
                        mat4 viewMatrix;
                    };
                    uniform Transform transform;
                    uniform vec2 billboardSize;
                    out vec2 textureCoord;
                    
                    vec3 size = vec3(billboardSize, 1.0);
                    vec4 GetPosPVM(vec3 point)
                    {
                        vec4 vertex = transform.modelMatrix * vec4(point, 1.0);
                        vec4 position = transform.projectionMatrix * transform.viewMatrix * vertex;
                        
                        return position;
                    }
                    
                    void main()
                    {
                        vec3 point = gl_in[0].gl_Position.xyz;
                        
                        vec3 right = vec3(transform.viewMatrix[0][0], transform.viewMatrix[1][0], transform.viewMatrix[2][0]);
                        vec3 up = vec3(transform.viewMatrix[0][1], transform.viewMatrix[1][1], transform.viewMatrix[2][1]);
                        
                        vec3 pointLD = point - (right + up);
                        pointLD *= size;
                        gl_Position = GetPosPVM(pointLD);
                        textureCoord = vec2(1.0, 1.0);
                        EmitVertex();
                        
                        vec3 pointLU = point - (right - up);
                        pointLU *= size;
                        gl_Position = GetPosPVM(pointLU);
                        textureCoord = vec2(1.0, 0.0);
                        EmitVertex();
                        
                        vec3 pointRD = point + (right - up);
                        pointRD *= size;
                        gl_Position = GetPosPVM(pointRD);
                        textureCoord = vec2(0.0, 1.0);
                        EmitVertex();
                        
                        vec3 pointRU = point + (right + up);
                        pointRU *= size;
                        gl_Position = GetPosPVM(pointRU);
                        textureCoord = vec2(0.0, 0.0);
                        EmitVertex();
                        
                        EndPrimitive(); 
                    }
                    ]]>
            </var>
            <var type="fragment" name="fbillboard">
                <![CDATA[
                    #version 330
                    uniform sampler2D sampler0;
                    in vec2 textureCoord;
                    out vec4 fragColor;
                    
                    void main()
                    {
                        fragColor = texture(sampler0, textureCoord);
                    }
                ]]>
            </var>
        </shaders>
    </pass>
</technique>
