<technique name="texture_normalmap" version="100">
	<pass name="pass0">
		<uniforms>
			<var name="transform.projectionMatrix" type="mat4" val="transform.projectionMatrix"/>
			<var name="transform.modelMatrix" type="mat4" val="transform.modelMatrix"/>
			<var name="transform.viewMatrix" type="mat4" val="transform.viewMatrix"/>
			<var name="transform.normalMatrix" type="mat4" val="transform.normalMatrix"/>
			<var name="transform.viewPosition" type="vec3" val="transform.viewPosition"/>
			
			<var name="material.ambient" type="vec4" val="material.ambient"/>
			<var name="material.diffuse" type="vec4" val="material.diffuse"/>
			<var name="material.specular" type="vec4" val="material.specular"/>
			<var name="material.emission" type="vec4" val="material.emission"/>
			<var name="material.shininess" type="float" val="material.shininess"/>
			
			<var name="light[0].ambient" type="vec4" val="light.ambient"/>
			<var name="light[0].diffuse" type="vec4" val="light.diffuse"/>
			<var name="light[0].specular" type="vec4" val="light.specular"/>
			<var name="light[0].position" type="vec4" val="light.position"/>
			<var name="light[0].attenuation" type="vec3" val="light.attenuation"/>
		</uniforms>
		<attributes>
			<var name="positions" type="vec3" val="mesh.positions"/>
			<var name="normals" type="vec3" val="mesh.normals"/>
			<var name="binormals" type="vec3" val="mesh.binormals"/>
			<var name="tangents" type="vec3" val="mesh.tangents"/>
			<var name="texture0" type="vec2" val="mesh.texture0"/>
		</attributes>
		<samplers>
			<var name="material.diffuseMap"/>
			<var name="material.normalMap"/>
		</samplers>
		<renderstate>
			<polygonmode val="fill"/>
            <winding val="ccw"/>
            <culling val="true"/>
			<blending val="false" src="srcAlpha" dst="invSrcAlpha"/>
		</renderstate>
		<rendertarget>
			<var val="default"/>
		</rendertarget>
		<lod geometry="10.0"/>
		<shaders>
			<var type="vertex" name="vnormalmap">
				<![CDATA[
					#version 330
					#define POSITION 	0
					#define NORMAL 		2
					#define BINORMAL    3
					#define TANGENT 	4
					#define TEXCOORD0 	5
					
					layout (location = POSITION)  in vec3 positions;
					layout (location = NORMAL)    in vec3 normals;
					layout (location = BINORMAL)  in vec3 binormals;
					layout (location = TANGENT)   in vec3 tangents;
					layout (location = TEXCOORD0) in vec2 texture0;
					
					struct Transform
					{
						mat4 modelMatrix;
						mat4 viewMatrix;
						mat4 projectionMatrix;
						mat4 normalMatrix;
						vec3 viewPosition;
					};
					uniform Transform transform;

					struct Light
					{
						vec4 	position;
						vec4 	ambient;
						vec4 	diffuse;
						vec4 	specular;
						vec3 	attenuation;
					};
					uniform Light light[1];
					
					struct Vertex 
					{
						vec2 texCoord0;
						vec3 normal;
						vec3 binormal;
						vec3 tangent;
						vec3 viewDir;
						vec3 lightDir;
					};
					out Vertex fragVertex;
					
					struct NormalMap
					{
						vec3 tangentLightPos;
						vec3 tangentViewPos;
						vec3 tangentFragPos;
					};
					out NormalMap fragNormal;

					void main()
					{
						vec4 vertex = transform.modelMatrix * vec4(positions, 1.0);
						
						fragVertex.texCoord0 = texture0;
						fragVertex.lightDir = vec3(normalize(light[0].position - vertex));
						fragVertex.viewDir = vec3(normalize(vec4(transform.viewPosition, 1.0) - vertex));
						fragVertex.normal = vec3(normalize(transform.normalMatrix * vec4(normals, 0.0)));
						fragVertex.tangent  = vec3(normalize(transform.normalMatrix * vec4(tangents, 0.0)));
						fragVertex.binormal = vec3(normalize(transform.normalMatrix * vec4(binormals, 0.0)));

						mat3 TBNMatrix = transpose(mat3(fragVertex.tangent, fragVertex.binormal, fragVertex.normal));  
						fragNormal.tangentLightPos = TBNMatrix * light[0].position.xyz;
						fragNormal.tangentViewPos  = TBNMatrix * transform.viewPosition;
						fragNormal.tangentFragPos  = TBNMatrix * vertex.xyz;

						gl_Position = transform.projectionMatrix * transform.viewMatrix * vertex;
					}
				]]>
			</var>
			<var name="shading_models_fsh" type="fragment" file="shading_models_fsh.glsl"/>
			<var type="fragment" name="fnormalmap">
				<![CDATA[
					#version 330
					
					struct Material
					{
						sampler2D diffuseMap;
						sampler2D normalMap;
						vec4  ambient;
						vec4  diffuse;
						vec4  specular;
						vec4  emission;
						float shininess;
						float transparency;
					};
					uniform Material material;
					
					struct Light
					{
						vec4 	position;
						vec4 	ambient;
						vec4 	diffuse;
						vec4 	specular;
						vec3 	attenuation;
					};
					uniform Light light[8];

					struct Vertex 
					{
						vec2 texCoord0;
						vec3 normal;
						vec3 binormal;
						vec3 tangent;
						vec3 viewDir;
						vec3 lightDir;
					};
					in 	Vertex 	fragVertex;
					
					struct NormalMap
					{
						vec3 tangentLightPos;
						vec3 tangentViewPos;
						vec3 tangentFragPos;
					};
					in NormalMap fragNormal;
					
					out vec4 	fragColor;

					vec4 blinn(vec3 normal, vec3 lightDir, vec3 viewDir, vec4 diffuseColor, vec4 specularColor, float specPower);
					vec4 phong(vec3 normal, vec3 lightDir, vec3 viewDir, vec4 diffuseColor, vec4 specularColor, float specPower);
					vec4 lambert(vec3 normal, vec3 lightDir, vec4 diffuseColor);
					
					void main()
					{
						vec4 diffuseColor = texture(material.diffuseMap, fragVertex.texCoord0);
						vec4 texNormal = texture(material.normalMap, fragVertex.texCoord0) * 2.0 - vec4(1.0);
						
						/*
						vec3 tangents  = normalize(fragVertex.tangent);
						vec3 binormals  = normalize(fragVertex.binormal);
						vec3 normals  = normalize(fragVertex.normal);
						vec3 normal = normalize(vec3(texNormal.x * tangents + texNormal.y * binormals + texNormal.z * normals));
						vec3 viewDir  = normalize(fragVertex.viewDir);
						vec3 lightDir = normalize(fragVertex.lightDir);
						*/
						
						vec3 normal = normalize(texNormal).xyz;
						vec3 viewDir = normalize(fragNormal.tangentViewPos - fragNormal.tangentFragPos);
						vec3 lightDir = normalize(fragNormal.tangentLightPos - fragNormal.tangentFragPos);
						
						fragColor = blinn(normal, lightDir, viewDir, diffuseColor, material.specular, material.shininess);

					}
				]]>
			</var>
		</shaders>
	</pass>
</technique>
