<technique name="texture_normalmap" version="100">
    <pass name="pass0">
        <uniforms>
            <var name="transform.projectionMatrix" type="mat4" val="transform.projectionMatrix"/>
            <var name="transform.modelMatrix" type="mat4" val="transform.modelMatrix"/>
            <var name="transform.viewMatrix" type="mat4" val="transform.viewMatrix"/>
            <var name="transform.normalMatrix" type="mat4" val="transform.normalMatrix"/>
            <var name="transform.viewPosition" type="vec3" val="transform.viewPosition"/>
            
            <var name="material.ambient" type="vec4" val="material.ambient"/>
            <var name="material.diffuse" type="vec4" val="material.diffuse"/>
            <var name="material.specular" type="vec4" val="material.specular"/>
            <var name="material.emission" type="vec4" val="material.emission"/>
            <var name="material.shininess" type="float" val="material.shininess"/>
            
            <var name="light[0].ambient" type="vec4" val="light.ambient"/>
            <var name="light[0].diffuse" type="vec4" val="light.diffuse"/>
            <var name="light[0].specular" type="vec4" val="light.specular"/>
            <var name="light[0].position" type="vec4" val="light.position"/>
        </uniforms>
        <attributes>
            <var name="position" type="vec3" val="mesh.position"/>
            <var name="normal" type="vec3" val="mesh.normal"/>
            <var name="binormal" type="vec3" val="mesh.binormal"/>
            <var name="tangent" type="vec3" val="mesh.tangent"/>
            <var name="texture0" type="vec2" val="mesh.texture0"/>
        </attributes>
        <samplers>
            <var name="material.diffuseMap"/>
            <var name="material.normalMap"/>
        </samplers>
        <renderstate>
            <polygonmode val="fill"/>
            <winding val="ccw"/>
            <culling val="true"/>
            <blending val="false" src="srcAlpha" dst="invSrcAlpha"/>
        </renderstate>
        <rendertarget>
            <var val="default"/>
        </rendertarget>
        <lod geometry="10.0"/>
        <shaders>
            <var name="texture_TBN" type="vertex" file="texture_TBN_vsh.glsl"/>
            <var name="shading_models" type="fragment" file="shading_models_fsh.glsl"/>
            <var type="fragment" name="fnormalmap">
                <![CDATA[
                    struct Material
                    {
                        sampler2D   diffuseMap;
                        sampler2D   normalMap;
                        
                        vec4        ambient;
                        vec4        diffuse;
                        vec4        specular;
                        vec4        emission;
                        float       shininess;
                    };
                    uniform Material material;
                    
                    struct Light
                    {
                        vec4    position;
                        vec4    ambient;
                        vec4    diffuse;
                        vec4    specular;
                    };
                    uniform Light light[1];
                    
                    struct Vertex
                    {
                        vec2 texCoord0;
                        vec3 normal;
                        vec3 binormal;
                        vec3 tangent;
                        vec3 position;
                        vec3 viewDir;
                        vec3 lightDir0;
                    };
                    in  Vertex fragVertex;
                    
                    struct TangentSpcae
                    {
                        vec3 tangentLightPos0;
                        vec3 tangentViewPos;
                        vec3 tangentFragPos;
                    };
                    in TangentSpcae fragTangentSpace;
                    
                    out vec4 fragColor;
                    
                    vec4 blinn(vec3 normal, vec3 lightDir, vec3 viewDir, vec4 diffuseColor, vec4 specularColor, float specPower);
                    vec4 phong(vec3 normal, vec3 lightDir, vec3 viewDir, vec4 diffuseColor, vec4 specularColor, float specPower);
                    vec4 lambert(vec3 normal, vec3 lightDir, vec4 diffuseColor);
                    
                    void main()
                    {
                        vec4 diffuseColor = texture(material.diffuseMap, fragVertex.texCoord0);
                        vec4 texNormal = texture(material.normalMap, fragVertex.texCoord0) * 2.0 - vec4(1.0);
                        
                        /*
                        vec3 tangents  = normalize(fragVertex.tangent);
                        vec3 binormals  = normalize(fragVertex.binormal);
                        vec3 normals  = normalize(fragVertex.normal);
                        vec3 normal = normalize(vec3(texNormal.x * tangents + texNormal.y * binormals + texNormal.z * normals));
                        vec3 viewDir  = normalize(fragVertex.viewDir);
                        vec3 lightDir0 = normalize(fragVertex.lightDir0);
                        */
                        
                        vec3 normal = normalize(texNormal).rgb;
                        vec3 viewDir = normalize(fragTangentSpace.tangentViewPos - fragTangentSpace.tangentFragPos);
                        vec3 lightDir0 = normalize(fragTangentSpace.tangentLightPos0 - fragTangentSpace.tangentFragPos);
                        
                        fragColor = blinn(normal, lightDir0, viewDir, diffuseColor, material.specular, material.shininess);
                    }
                ]]>
            </var>
        </shaders>
    </pass>
</technique>
