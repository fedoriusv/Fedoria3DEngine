<technique name="texture_without_light" version="100">

    <textures>
        <texture name="box" file="textures/test_basetex.jpg"/>
    </textures>

    <pass name="pass0">
        <uniforms>
            <var name="transform.projectionMatrix" type="mat4" val="transform.projectionMatrix"/>
            <var name="transform.modelMatrix" type="mat4" val="transform.modelMatrix"/>
            <var name="transform.viewMatrix" type="mat4" val="transform.viewMatrix"/>
        </uniforms>
        <attributes>
            <var name="position" type="vec3" val="mesh.position"/>
            <var name="texture0" type="vec2" val="mesh.texture0"/>
        </attributes>
        <samplers>
            <var name="sampler0" val="box"/>
        </samplers>
        <renderstate>
            <polygonmode val="fill"/>
            <winding val="ccw"/>
            <culling val="true"/>
            <blending val="false" src="srcAlpha" dst="invSrcAlpha"/>
        </renderstate>
        <rendertarget>
            <var val="default"/>
        </rendertarget>
        <lod geometry="100.0"/>
        <shaders>
            <var type="vertex" name="vdefault">
                <![CDATA[
                    #define POSITION    0
                    #define NORMAL      2
                    #define TEXCOORD0   5
                    
                    layout (location = POSITION)  in vec3 position;
                    layout (location = TEXCOORD0) in vec2 texture0;
                    
                    struct Transform
                    {
                        mat4 modelMatrix;
                        mat4 viewMatrix;
                        mat4 projectionMatrix;
                    };
                    uniform Transform   transform;
                    
                    struct Vertex
                    {
                        vec2  texCoord0;
                    };
                    out Vertex fragVertex;
                    
                    void main()
                    {
                        vec4 vertex = transform.modelMatrix * vec4(position, 1.0);
                        fragVertex.texCoord0 = texture0;
                        
                        gl_Position = transform.projectionMatrix * transform.viewMatrix * vertex;
                    }
                ]]>
            </var>
            <var type="fragment" name="fdefault">
                <![CDATA[
                    #define USE_BUFFER_TEXTRE 0
                    #if USE_BUFFER_TEXTRE
                    uniform samplerBuffer sampler0;
                    #else //USE_BUFFER_TEXTRE
                    uniform sampler2D sampler0;
                    #endif //USE_BUFFER_TEXTRE
                    
                    struct Vertex
                    {
                        vec2 texCoord0;
                    };
                    in  Vertex  fragVertex;
                    out vec4    fragColor;
                    
                    #if USE_BUFFER_TEXTRE
                    const ivec2 samplerSize = ivec2(512, 512);
                    
                    int valueIndex(ivec2 pos)
                    {
                        int size = textureSize(sampler0);
                        return ((samplerSize.y - pos.y) * samplerSize.y) + pos.x;
                    }
                    #endif //USE_BUFFER_TEXTRE
                    
                    void main()
                    {
                    #if USE_BUFFER_TEXTRE
                        ivec2 texPos = ivec2(fragVertex.texCoord0 * vec2(samplerSize));
                        fragColor = texelFetch(sampler0, valueIndex(texPos));
                    #else //USE_BUFFER_TEXTRE
                         fragColor = texture(sampler0, fragVertex.texCoord0, 0);
                    #endif //USE_BUFFER_TEXTRE
                    }
                ]]>
            </var>
        </shaders>
    </pass>
</technique>
