<technique name="texture_target" version="100">

    <!-- Textures -->
    <textures>
        <texture name="box" file="textures/box.jpg"/>
    </textures>
    
    <!-- Render Passes -->
    <pass name="pass0">
        <uniforms>
            <var name="transform.projectionMatrix" type="mat4" val="transform.projectionMatrix"/>
            <var name="transform.modelMatrix" type="mat4" val="transform.modelMatrix"/>
            <var name="transform.viewMatrix" type="mat4" val="transform.viewMatrix"/>
            <var name="viewportSize" type="mat4" val="viewportSize"/>
        </uniforms>
        <attributes>
            <var name="position" type="vec3" val="mesh.position"/>
            <var name="texture0" type="vec2" val="mesh.texture0"/>
        </attributes>
        <fragdata>
            <var name="fragColor" type="vec4" val="attachment.color"/>
            <var name="halfColor" type="vec4" val="attachment.color"/>
            <var name="rColor" type="float" val="attachment.color"/>
        </fragdata>
        <samplers>
            <var name="sampler0" val="box"/>
        </samplers>
        <renderstate>
            <polygonmode val="fill"/>
            <winding val="ccw"/>
            <culling val="false"/>
            <blending val="false" src="srcAlpha" dst="invSrcAlpha"/>
        </renderstate>
        <rendertarget>
            <var val="targetTestLeft"/>
            <var val="targetTestRight"/>
            <var val="targetTestMSAA"/>
        </rendertarget>
        <lod geometry="0.0"/>
        <shaders>
            <var type="vertex" name="vdefault">
                <![CDATA[
                    #version 330
                    
                    #define POSITION    0
                    #define NORMAL      1
                    #define TEXCOORD0   2
                    
                    layout (location = POSITION)  in vec3 position;
                    layout (location = TEXCOORD0) in vec2 texture0;
                    
                    struct Transform
                    {
                        mat4 modelMatrix;
                        mat4 viewMatrix;
                        mat4 projectionMatrix;
                    };
                    uniform Transform transform;
                    
                    struct Vertex
                    {
                        vec2  texCoord0;
                    };
                    out Vertex fragVertex;
                    
                    void main()
                    {
                        vec4 vertex   = transform.modelMatrix * vec4(position, 1.0);
                        fragVertex.texCoord0 = texture0;
                        
                        gl_Position = transform.projectionMatrix * transform.viewMatrix * vertex;
                    }
                ]]>
            </var>
            <var type="fragment" name="fdefault">
                <![CDATA[
                    #version 330
                    
                    uniform sampler2D sampler0;
                    uniform vec2 viewportSize;
                    
                    struct Vertex
                    {
                        vec2  texCoord0;
                    };
                    in  Vertex fragVertex;
                    
                    layout(origin_upper_left) in vec4 gl_FragCoord;
                    
                    layout (location = 0) out vec4 fragColor;
                    layout (location = 1) out vec4 halfColor;
                    layout (location = 2) out float rColor;
                    
                    void main()
                    {
                        fragColor = texture(sampler0, fragVertex.texCoord0);
                        if(gl_FragCoord.x < viewportSize.x / 2)
                        {
                            halfColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);
                        }
                        else
                        {
                            halfColor = vec4(0.0f, 0.0f, 1.0f, 1.0f);
                        }
                        rColor = -1000.15689;
                    }
                ]]>
            </var>
        </shaders>
    </pass>
</technique>
