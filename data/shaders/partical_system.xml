<technique name="partical_system" version="100">

    <pass name="partical_system_feedback">
        <uniforms>
            <var name="genParticle.genPosition" type="vec3" val="parical.genPosition"/>
            <var name="genParticle.genGravity" type="vec3" val="parical.genGravity"/>
            <var name="genParticle.genVelocityMin" v="vec3" val="parical.genVelocityMin"/>
            <var name="genParticle.genVelocityRange" type="vec3" val="parical.genVelocityRange"/>
            <var name="genParticle.genColor" type="vec3" val="parical.genColor"/>
            <var name="genParticle.genSize" type="float" val="parical.genSize"/>
            <var name="genParticle.genLifeMin" type="float" val="parical.genLifeMin"/>
            <var name="genParticle.genLifeRange" type="float" val="parical.genLifeRange"/>
            <var name="genParticle.timePassed" type="float" val="parical.timePassed"/>
            <var name="genParticle.randomSeed" type="vec3" val="parical.randomSeed"/>
            <var name="genParticle.numToGenerate" type="int" val="parical.numToGenerate"/>
        </uniforms>
        <attributes>
            <var name="position" type="vec3" val="parical.position"/>
            <var name="color" type="vec3" val="parical.color"/>
            <var name="velocity" type="vec3" val="parical.velocity"/>
            <var name="lifetime" type="float" val="parical.lifetime"/>
            <var name="size" type="float" val="parical.size"/>
            <var name="type" type="int" val="parical.type"/>
        </attributes>
        <samplers>
        </samplers>
        <renderstate>
            <polygonmode val="fill"/>
            <winding val="ccw"/>
            <culling val="false"/>
            <blending val="false" src="srcAlpha" dst="invSrcAlpha"/>
        </renderstate>
        <rendertarget>
            <var val="default"/>
        </rendertarget>
        <lod geometry="0.0"/>
        <shaders>
            <var type="vertex" name="vpartical_system_0">
                <![CDATA[
                    #define POSITION    1
                    #define VELOCITY    2
                    #define COLOR       3
                    #define LIFETIME    4
                    #define SIZE        5
                    #define TYPE        6
                    
                    layout(location = POSITION) in vec3  position;
                    layout(location = VELOCITY) in vec3  velocity;
                    layout(location = COLOR)    in vec3  color;
                    layout(location = LIFETIME) in float lifetime;
                    layout(location = SIZE)     in float size;
                    layout(location = TYPE)     in int   type;
                    
                    struct Particle
                    {
                        vec3  position;
                        vec3  velocity;
                        vec3  color;
                        float lifetime;
                        float size;
                        int   type;
                    };
                    
                    out Particle geomParticle;
                    
                    void main()
                    {
                        geomParticle.position = position;
                        geomParticle.velocity = velocity;
                        geomParticle.color = color;
                        geomParticle.lifetime = lifetime;
                        geomParticle.size = size;
                        geomParticle.type = type;
                    }
                ]]>
            </var>
            <var type="geometry" name="gpartical_system_0">
                <![CDATA[
                    layout(points) in;
                    layout(points, max_vertices = 40) out;
                    
                    struct Particle
                    {
                        vec3  position;
                        vec3  velocity;
                        vec3  color;
                        float lifetime;
                        float size;
                        int   type;
                    };
                    in Particle geomParticle[];
                    out Particle feedbackParticle;
                    
                    struct GenParticle
                    {
                        vec3 genPosition;
                        vec3 genGravity;
                        vec3 genVelocityMin;
                        vec3 genVelocityRange;
                        
                        vec3  genColor;
                        float genSize;
                        
                        float genLifeMin;
                        float genLifeRange;
                        float timePassed;
                        
                        vec3 randomSeed;
                        int  numToGenerate;
                    };
                    uniform GenParticle genParticle;
                    
                    vec3 localSeed;
                    
                    // This function returns random number from zero to one
                    float randZeroOne()
                    {
                        uint n = floatBitsToUint(localSeed.y * 214013.0 + localSeed.x * 2531011.0 + localSeed.z * 141251.0);
                        n = n * (n * n * 15731u + 789221u);
                        n = (n >> 9u) | 0x3F800000u;
                     
                        float fRes =  2.0 - uintBitsToFloat(n);
                        localSeed = vec3(localSeed.x + 147158.0 * fRes, localSeed.y * fRes  + 415161.0 * fRes, localSeed.z + 324154.0 * fRes);
                        return fRes;
                    }
                    
                    void main()
                    {
                        localSeed = randomSeed;
                        
                        feedbackParticle.position = geomParticle[0].position;
                        feedbackParticle.velocity = geomParticle[0].velocity;
                        if(geomParticle.type[0] != 0)
                        {
                            feedbackParticle.position += feedbackParticle.velocity * timePassed;
                            feedbackParticle.velocity += genParticle.genGravity * timePassed;
                        }
                        feedbackParticle.color = geomParticle[0].color;
                        feedbackParticle.lifetime = geomParticle[0].lifetime - timePassed;
                        feedbackParticle.size = geomParticle[0].size;
                        feedbackParticle.type = geomParticle[0].type;
                        
                        if(feedbackParticle.type == 0)
                        {
                            EmitVertex();
                            EndPrimitive();
                        
                            for(int i = 0; i < numToGenerate; i++)
                            {
                                feedbackParticle.position = genParticle.genPosition;
                                feedbackParticle.velocity = genParticle.genVelocityMin + vec3(genParticle.genVelocityRange.x * randZeroOne(), genParticle.genVelocityRange.y * randZeroOne(), genParticle.genVelocityRange.z * randZeroOne());
                                feedbackParticle.color = genParticle.genColor;
                                feedbackParticle.lifetime = genParticle.genLifeMin + genParticle.genLifeRange * randZeroOne();
                                feedbackParticle.size = genParticle.genSize;
                                feedbackParticle.type = 1;
                                
                                EmitVertex();
                                EndPrimitive();
                            }
                        }
                        else if(feedbackParticle.lifetime > 0.0)
                        {
                            EmitVertex();
                            EndPrimitive();
                        }
                    }
                ]]>
            </var>
            <var type="fragment" name="fpartical_system_0">
                <![CDATA[
                    out vec4 fragColor;
                    
                    void main()
                    {
                        fragColor = vec4(1.0, 1.0, 1.0, 1.0);
                    }
                ]]>
            </var>
        </shaders>
    </pass>
    <pass name="pass1">
        <uniforms>
            <var name="transform.projectionMatrix" type="mat4" val="transform.projectionMatrix"/>
            <var name="transform.modelMatrix" type="mat4" val="transform.modelMatrix"/>
            <var name="transform.viewMatrix" type="mat4" val="transform.viewMatrix"/>
            <var name="transform.normalMatrix" type="mat4" val="transform.normalMatrix"/>
        </uniforms>
        <attributes>
            <var name="position" type="vec3" val="parical.position"/>
            <var name="color" type="vec3" val="parical.color"/>
            <var name="lifetime" type="float" val="parical.lifetime"/>
            <var name="size" type="float" val="parical.size"/>
            <var name="type" type="int" val="parical.type"/>
        </attributes>
        <samplers>
        </samplers>
        <renderstate>
            <polygonmode val="fill"/>
            <winding val="ccw"/>
            <culling val="false"/>
            <blending val="false" src="srcAlpha" dst="invSrcAlpha"/>
        </renderstate>
        <rendertarget>
            <var val="default"/>
        </rendertarget>
        <lod geometry="0.0"/>
        <shaders>
            <var type="vertex" name="vpartical_system_1">
                <![CDATA[
                    #define POSITION    1
                    #define COLOR       2
                    #define LIFETIME    3
                    #define SIZE        4
                    #define TYPE        5
                    
                    layout(location = POSITION) in vec3  position;
                    layout(location = COLOR)    in vec3  color;
                    layout(location = LIFETIME) in float lifetime;
                    layout(location = SIZE)     in float size;
                    layout(location = TYPE)     in int   type;
                    
                    struct SParticle
                    {
                        vec3  position;
                        vec3  color;
                        float lifetime;
                        float size;
                        int   type;
                    };
                    
                    out SParticle geomParticle;
                    
                    void main()
                    {
                        geomParticle.position = position;
                        geomParticle.color = color;
                        geomParticle.lifetime = lifetime;
                        geomParticle.size = size;
                        geomParticle.type = type;
                    }
                ]]>
            </var>
            <var type="geometry" name="gpartical_system_1">
                <![CDATA[
                    layout(points) in;
                    layout(triangle_strip, max_vertices = 4) out;
                    
                    struct Transform
                    {
                        mat4 projectionMatrix;
                        mat4 viewMatrix;
                    };
                    uniform Transform transform;
                    
                    struct Particle
                    {
                        vec3  position;
                        vec3  color;
                        float lifetime;
                        float size;
                        int   type;
                    };
                    in Particle geomParticle[];
                    
                    uniform vec3 vQuad1, vQuad2;
                    
                    smooth out vec2 vTexCoord;
                    flat out vec4 vColorPart;
                    
                    void main()
                    {
                        if(geomParticle.type[0] != 0)
                        {
                            vec3 vPosOld = gl_in[0].gl_Position.xyz;
                            float fSize = geomParticle.size[0];
                            mat4 mVP = transform.projectionMatrix * transform.viewMatrix;
                            
                            vColorPart = vec4(vColorPass[0], fLifeTimePass[0]);
                               
                            vec3 vPos = vPosOld+(-vQuad1-vQuad2)*fSize;
                            vTexCoord = vec2(0.0, 0.0);
                            gl_Position = mVP*vec4(vPos, 1.0);
                            EmitVertex();
                            
                            vPos = vPosOld+(-vQuad1+vQuad2)*fSize;
                            vTexCoord = vec2(0.0, 1.0);
                            gl_Position = mVP*vec4(vPos, 1.0);
                            EmitVertex();
                            
                            vPos = vPosOld+(vQuad1-vQuad2)*fSize;
                            vTexCoord = vec2(1.0, 0.0);
                            gl_Position = mVP*vec4(vPos, 1.0);
                            EmitVertex();
                            
                            vPos = vPosOld+(vQuad1+vQuad2)*fSize;
                            vTexCoord = vec2(1.0, 1.0);
                            gl_Position = mVP*vec4(vPos, 1.0);
                            EmitVertex();
                              
                            EndPrimitive();
                        }
                    }
                ]]>
            </var>
            <var type="fragment" name="fpartical_system_1">
                <![CDATA[
                    uniform sampler2D diffuseTexture;
                    
                    smooth in vec2 vTexCoord;
                    flat in vec4 vColorPart;
                    
                    out vec4 fragColor;
                    
                    void main()
                    {
                        vec4 vTexColor = texture2D(diffuseTexture, vTexCoord);
                        fragColor = vec4(vTexColor.xyz, 1.0) * vColorPart;
                    }
                ]]>
            </var>
        </shaders>
    </pass>
</technique>
