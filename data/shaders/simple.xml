<technique name="simple" version="100">

    <!-- Render Targets -->
    <rendertargets>
        <target name="filterBuffer" width="720" height="480" ratio="0.0" color="0xff00ff00">
            <color active="true" attach="1" clear="true" format="8888" output="texture"/>
            <depth active="true" clear="true" format="16" output="render"/>
            <stencil active="false" clear="true" format="16"/>
        </target>
        <target name="blurBufferH" width="128" height="128" format="565"/>
        <target name="blurBufferV" width="128" height="128" format="565"/>
    </rendertargets>
    
    <!-- Render Passes -->
	<pass name="pass0">
		<uniforms>
			<var name="transform.projectionMatrix" type="mat4" val="transform.projectionMatrix"/>
			<var name="transform.modelMatrix" type="mat4" val="transform.modelMatrix"/>
			<var name="transform.viewMatrix" type="mat4" val="transform.viewMatrix"/>
		</uniforms>
		<attributes>
			<var name="positions" type="vec3" val="mesh.positions"/>
		</attributes>
		<samplers> 
		</samplers>
		<renderstate polygonmode="line" winding="cw" cullface="false"/>
		<rendertarget val="default"/>
        <lod geometry="0.0"/>
		<shaders>
			<var type="vertex" name="vdefault">
				<![CDATA[
					#version 330
					#define POSITION 	0

					layout (location = POSITION) in vec3 positions;

					struct Transform
					{
						mat4 projectionMatrix;
						mat4 modelMatrix;
						mat4 viewMatrix;
					};

					uniform Transform transform;

					void main()
					{
                        vec4 vertex = transform.modelMatrix * vec4(positions, 1.0);
                        gl_Position = transform.projectionMatrix * transform.viewMatrix * vertex;
					}
				]]>
			</var>
			<var type="fragment" name="fdefault">
				<![CDATA[
					#version 330
					out vec4 fragColor;

					void main()
					{
						fragColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);
					}
				]]>
			</var>
		</shaders>
	</pass>
</technique>
