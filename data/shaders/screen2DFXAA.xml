<technique name="screen2DFXAA" version="100">

    <!-- Render Targets -->
    <rendertargets>
        <target name="targetTestRight" x="512" y="0" width="1024" height="384" ratio="0.0">
            <color color="0x00ffff00" clear="true">
                <attach active="true" val="0" format="rgba32u" output="texture"/>
                <attach active="true" val="1" format="rgba32f" output="texture"/>
                <attach active="true" val="2" format="r32f" output="texture"/>
            </color>
            <depth active="true" value="1.0" clear="true" format="depth24u" output="texture"/>
        </target>
    </rendertargets>
    
    <!-- Render Passes -->
    <pass name="pass0">
        <uniforms>
            <var name="transform.modelMatrix" type="mat4" val="transform.modelMatrix"/>
        </uniforms>
        <attributes>
            <var name="position" type="vec3" val="mesh.position"/>
            <var name="texture0" type="vec2" val="mesh.texture0"/>
        </attributes>
        <samplers>
            <var name="sampler0" val="targetTestRight" attachment="c0"/>
        </samplers>
        <renderstate>
            <polygonmode val="fill"/>
            <winding val="ccw"/>
            <culling val="false"/>
            <blending val="false" src="srcAlpha" dst="invSrcAlpha"/>
        </renderstate>
        <rendertarget>
            <var val="default"/>
        </rendertarget>
        <lod geometry="0.0"/>
        <shaders>
            <var name="vscreen2DFXAA" type="vertex">
                <![CDATA[
                    #define POSITION    0
                    #define NORMAL      1
                    #define TEXCOORD0   2
                    
                    layout (location = POSITION)  in vec3 position;
                    layout (location = TEXCOORD0) in vec2 texture0;
                    
                    struct Transform
                    {
                        mat4 modelMatrix;
                    };
                    uniform Transform transform;
                    
                    struct Vertex
                    {
                        vec2 texCoord0;
                    };
                    out Vertex fragVertex;
                    
                    void main()
                    {
                        vec4 vertex = transform.modelMatrix * vec4(position, 1.0);
                        fragVertex.texCoord0 = texture0;
                        
                        gl_Position = vertex;
                    }
                ]]>
            </var>
            <var name="target_effects" type="fragment" file="target_effects_fsh.glsl"/>
            <var name="ffxaa" type="fragment" file="fxaa_fsh.glsl"/>
            <var name="fscreen2DFXAA" type="fragment">
                <![CDATA[
                    uniform sampler2D sampler0;
                    
                    struct Vertex
                    {
                        vec2 texCoord0;
                    };
                    in  Vertex  fragVertex;
                    out vec4    fragColor;
                    
                    vec4 blur(sampler2D sampler, vec2 coord, float blurSizeH = 1.0 / 300.0, float blurSizeV = 1.0 / 200.0);
                    vec4 fxaaPixelShader(vec4 posPos, sampler2D tex, vec2 rcpFrame);
                    
                    void main()
                    {
                    #ifdef USE_FXAA
                        ivec2 size = textureSize(sampler0, 0);
                        
                        const float FXAA_SUBPIX_SHIFT = 0.0;
                        vec2 rcpFrame = 1.0 / size;
                        
                        vec4 posPos;
                        posPos.xy = fragVertex.texCoord0;
                        posPos.zw = fragVertex.texCoord0 - (rcpFrame * (0.5 + FXAA_SUBPIX_SHIFT));
                        
                        fragColor = fxaaPixelShader(posPos, sampler0, 1.0/size);
                    #else //USE_FXAA
                        //fragColor = blur(sampler0, fragVertex.texCoord0);
                        fragColor = texture(sampler0, fragVertex.texCoord0);
                    #endif //USE_FXAA
                    }
                ]]>
            </var>
        </shaders>
    </pass>
</technique>
